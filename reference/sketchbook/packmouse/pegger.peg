grammar         = whitespace rule+.
rule            = name name? '=' peg '.'.

peg             = term ('/' term)*.
term            = factor+.
factor lookahead= '&' primary.   # XXX NB these are subclasses of Peg,
factor not      = '!' primary.   #        not of something called 'Factor'
factor star     = primary '*'.   #        maybe we should use precedence for this
factor plus     = primary '+'.
factor optional = primary '?'.
factor          = primary.       # XXX chain rule

primary         = '(' peg ')'.
primary cc      = "[" char_class* ']'.
primary dqs     = "\"" dquoted_char* '"'.    # literal token (w/ optional white)
primary sqs     = "'" quoted_char* '\''.     # literal string
primary ident   = name.
primary end     = '$'.   # for end of input

char_class      = lit_char_class ("-" lit_char_class)?.

lit_char_class ecc = "\\" _.
lit_char_class ucc = !"]" _.

quoted_char eqc = "\\" _.
quoted_char uqc = !"'" _.

dquoted_char edc = "\\" _.
dquoted_char udc = !"\"" _.

name            = alpha alphanum* !alphanum whitespace.
alpha           = [A-Za-z_].
alphanum        = [A-Za-z_0-9]. 

whitespace noise = (white_char / comment)*.
white_char noise = [ \t\r\n\f].
comment noise    = "#" (!"\n" _)* "\n".

# TODO: support for identifiers vs. keywords
# TODO: precedence
# TODO: more char-class syntax, e.g. [^abc]
# TODO: combinators for lists with separators

# To parse into ASTs automatically, we need two more bits of info in
# the grammar:
#  - a class-name for each branch of a rule
#  - a marker for 'punctuation' rules to be left out
# The general rule is, each branch of a non-noise rule should have a
# name, and we get a tree node with that name, consed with the items
# on the RHS that are not punctuation. An item is punctuation if it
# is a 'punctuation' rule or an exact literal ('foo' or "bar").
# N.B. this doesn't spell out how to handle fancier PE's.
