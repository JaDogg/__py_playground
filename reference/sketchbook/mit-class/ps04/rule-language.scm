(define (make-simplifier rules)
  (combine-actions (map compile-rule rules)))

(define (combine-actions actions)
  (define (simplify e)
    (let ((e (if (list? e)
                 (map simplify e)
                 e)))
      (cond ((some (lambda (action) (action e)) actions)
             => simplify)
            (else e))))
  simplify)

(define (compile-rule rule)
  (let ((matcher  (match.compile (car rule)))
        (guard    (compile-guard (cadr rule)))
        (template (compile-template (caddr rule))))
    (lambda (e)
      (matcher (list e) '()
        (lambda (ls r)
          (and (null? ls)
               (guard r)
               (template r)))))))

(define (compile-guard guard)
  (cond ((eq? guard 'none)
         (lambda (r) #t))
        ((and (pair? guard) (procedure? (car guard)))
         (let ((predicate (car guard))
               (arguments (cdr guard)))
           (lambda (r)
             (apply predicate (match.instantiate r arguments)))))
        (else
         (error "Bad guard syntax" guard))))

(define (compile-template template)
  (lambda (r)
    ; XXX this will need to get fancier later
    ; XXX how are we going to do segment variables?
    (match.instantiate r template)))
